package study;

/*

Java

* OOP란? 객체 지향 프로그래밍이란?
하나의 클래스를 바탕으로 서로 다른 상태의 인스턴스를 만들면서 다른 행동들을 하게 할 수 있음
= 코드의 재사용 가능(재활용성). 유지 보수에 용이함.
객체와 객체의 유기적인 상호작용을 통해 프로그램이 동작하는 것. 여기서 객체란 현실의 물체를 의미함. 사람의 사고와 가장 비슷하게 프로그래밍 가능 함.

장점 > 아파치, 스프링과 같은 자바를 지원하는 많은 오픈 소스 프로젝트가 존재해서 짧은 개발 시간 내에 안정적인 프로그램 구현 가능
단점 > 비교적 속도가 느리다는게 있지만 하드웨어 성능의 발전으로 JVM 기능의 향상으로 격차가 줄어듦
자바 가상 머신 위에서 동작하기 때문에 OS에 독립적임.


* 메모리 영역이란?
1. 메소드 영역
- 모든 쓰레드가 공유하는 메모리 영역입니다.
- 메소드 영역은 클래스, 인터페이스 메소드, 필드, static 변수, 전역 변수들 저장.

2. stack
- 메소드 호출 시 마다 각각의 스택 프레임(그 메서드만을 위한 공간)이 생성합니다. 그리고 메서드 안에서 사용되는 값들을 저장하고
  호출된 메서드의 매개변수, 지역변수, 리턴 값 및 연산 시 일어나는 값들을 임시로 저장합니다. 마지막으로, 메서드 수행이 끝나면 프레임별로 삭제합니다.
- 지역변수, 함수(메서드)등이 할당.

3. heap
- 모든 쓰레드가 공유하며, new 키워드로 생성된 객체와 배열이 생성되는 영역입니다. 또한, 메소드 영역에 로드된 클래스만 생성이 가능하고
  Garbage Collector가 참조되지 않는 메모리를 확인하고 제거하는 영역입니다.
- new 연산자를 통한 동적 할당 된 객체 저장. 가비지 컬렉션에 의해 관리.


* Primitive type vs Reference type
1. 기본형(primitive)
- stack 메모리 영역에 실제 값을 저장하는 데이터 타입.
- byte, short, int, long, float, double, char, boolean / call by value 호출 방식을 사용함.

2. 참조형(reference)
- 메모리 상에 객체가 있는 위치를 저장하는 것.
- String, 클래스, 인터페이스.. new 연산자로 정의. 실제 값은 heap에 저장되고 stack에는 메모리 주소만 저장 / call by reference.


* 가비지 컬렉션(Garbage Collection)란?
- 시스템에서 더 이상 사용하지 않는 동적 할당된 메모리 블록을 찾아 다시 사용 가능한 자원으로 회수하는 것.
- 자동으로 이루어지므로 메모리 영역 관리 할 필요 없음.


*/

public class Interview {


}























